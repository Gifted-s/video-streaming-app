{"version":3,"sources":["components/Home.js","config/config.js","components/Footer.js","components/Header.js","components/Player.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","to","Component","config","PROENDOINT","DEVENDPOINT","Footer","Header","Player","props","ongoingPlay","JSON","parse","localStorage","getItem","state","videoId","match","params","id","videoData","previoustime","getParamsId","time","a","console","log","fetch","this","res","json","data","setState","parseInt","currentTime","wasplayingbefore","Math","floor","onLoadStartCapture","player","onTimeUpdate","e","duration","setItem","stringify","calculatePlaybackTime","timeStamp","ref","controls","crossOrigin","src","type","name","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAGqBA,E,4JACjB,WACI,OACI,qBAAKC,UAAU,iBAAf,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,gDAAf,SACQ,cAAC,IAAD,CAAMC,GAAE,YAAR,SACI,qBAAKD,UAAU,gBAAf,SACI,qBAAKA,UAAU,YAAf,SACG,qBAAKA,UAAU,kBAAf,0C,GATLE,a,yBCElBC,EALF,CACVC,WAAW,mDACXC,YAAa,yBCMFC,MAPf,WACI,OACI,+DCKOC,MAPf,WACI,OACI,qECCaC,E,kDACjB,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GAEN,IAAIC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQ,YAHnC,OAIf,EAAKC,MAAQ,CAETC,QAAS,EAAKP,MAAMQ,MAAMC,OAAOC,GAEjCC,UAAW,GAEXC,aAAcX,GAAeA,EAAYS,KAAO,EAAKG,cAAiBZ,EAAYa,KAAW,GAVlF,E,4FAanB,8BAAAC,EAAA,sEAEQC,QAAQC,IAAI,cAFpB,SAI0BC,MAAM,GAAD,OAAIxB,EAAOC,WAAX,kBAA+BwB,KAAKb,MAAMC,QAA1C,UAJ/B,cAIca,EAJd,gBAK2BA,EAAIC,OAL/B,OAKcC,EALd,OAOQH,KAAKI,SAAS,CAAEZ,UAAWW,IAPnC,kDASQN,QAAQC,IAAR,MATR,0D,+EAeA,WACI,OAAOO,SAASL,KAAKnB,MAAMQ,MAAMC,OAAOC,M,mCAM5C,SAAsBe,GAClB,IAAIC,EAAkBxB,KAAKC,MAAMC,aAAaC,QAAQ,YACtD,OAAGqB,GAIIA,EAAiBZ,MAAM,EACfa,KAAKC,MAAOH,EAAc,IAAQN,KAAKb,MAAMM,cAAgB,EAGrEe,KAAKC,MAAOH,EAAc,IAAQN,KAAKb,MAAMM,gB,oBAExD,WAAU,IAAD,OACL,OACI,sBAAKrB,UAAU,MAAf,UACI,cAAC,EAAD,IACA,yBAAQA,UAAU,aAAlB,UACI,uBAEIsC,mBAAoB,WAEhB,EAAKC,OAAOL,YAAc,EAAKnB,MAAMM,cAEzCmB,aAAc,SAACC,GAIR,EAAKF,OAAOL,aAAe,EAAKK,OAAOG,WACtC7B,aAAa8B,QAAQ,UAAWhC,KAAKiC,UAAU,CAAEzB,GAAI,EAAKG,cAAeC,KAAM,KAC/E,EAAKS,SAAS,CAACX,aAAa,KAOhCR,aAAa8B,QAAQ,UAAWhC,KAAKiC,UAAU,CAAEzB,GAAI,EAAKG,cAAeC,KAAM,EAAKsB,sBAAsBJ,EAAEK,eAMhHC,IAAK,SAACA,GAAU,EAAKR,OAASQ,GAAOC,UAAQ,EAACC,YAAY,YAzB9D,SA+BI,wBAAQC,IAAG,UAAK/C,EAAOC,WAAZ,kBAAgCwB,KAAKb,MAAMC,SAAWmC,KAAK,gBAE1E,6BAAKvB,KAAKb,MAAMK,UAAUgC,UAE9B,cAAC,EAAD,W,GAxFoBlD,a,MCerBmD,MAVf,WACI,OACI,cAAC,IAAD,UACI,eAAC,IAAD,WACA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzD,IACjC,cAAC,IAAD,CAAOwD,KAAK,cAAcC,UAAWhD,UCFlCiD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.552749d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div className=\"App App-header\">\n                <div className=\"container\">\n                    <div className=\"row justify-content-center align-items-center\">\n                            <Link to={`/player/0`}>\n                                <div className=\"card border-0\">\n                                    <div className=\"card-body\">\n                                       <div className=\"btn btn-primary\">\n                                           Begin Stream\n                                       </div>\n                                    </div>\n                                </div>\n                            </Link>\n                    </div>\n                </div>\n                \n            </div>\n        )\n    }\n}\n\n","const config= {\n    PROENDOINT:\"https://ecosystem-streaming-server.herokuapp.com\",\n    DEVENDPOINT: \"http://localhost:4000\"\n}\n\nexport default  config","import React from 'react';\nfunction Footer() {\n    return (\n        <footer>\n            &copy; 2021, Ecosystem.inc\n        </footer>\n    );\n}\nexport default Footer;\n\n","import React from 'react';\nfunction Header() {\n    return (\n        <header>\n          Ecosystem Technical Assignment\n        </header>\n    );\n}\nexport default Header;\n\n","import React, { Component } from 'react'\nimport config from '../config/config';\nimport Footer from './Footer';\nimport Header from './Header';\nexport default class Player extends Component {\n    constructor(props) {\n        super(props);\n        // fetch ongoing video details from localstorage incase user reloads the page and wants to continue watching thesame video or there was a network failure\n        let ongoingPlay = JSON.parse(localStorage.getItem(\"playing\"))\n        this.state = {\n            // this state will store the video id \n            videoId: this.props.match.params.id,\n            // this state will store all the video details\n            videoData: {},\n            // this state will check if the user was  watching the video then reloadied the page and get the time already spent on that video\n            previoustime: ongoingPlay ? (ongoingPlay.id === this.getParamsId()) ? ongoingPlay.time : 0 : 0\n        };\n    }\n    async componentDidMount() {\n        try {\n            console.log(\"atrt sgsin\")\n            // this enpoint will fetch the video details, (NOT THE FILE itself, that will be handled later)\n            const res = await fetch(`${config.PROENDOINT}/video/${this.state.videoId}/data`);\n            const data = await res.json();\n            // store the video details\n            this.setState({ videoData: data });\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    /**\n    * @returns {integer} the request paramenter (id)\n    */\n    getParamsId() {\n        return parseInt(this.props.match.params.id)\n    }\n    /**\n    * @param {integer} the inital time for that video\n    * @returns {object} created culture lesson\n    */\n    calculatePlaybackTime(currentTime) {\n        let wasplayingbefore= JSON.parse(localStorage.getItem('playing'))\n        if(wasplayingbefore){\n            // if video has played more than 8 seconds before, then we don't just want to \n            // remind the user where they were in the video before reload but also remind the user some parts of the scene they were\n            // so we have to take user back 8 seconds for this\n            if(wasplayingbefore.time>=8){\n                return Math.floor((currentTime / 1000) + this.state.previoustime) - 8\n            }\n        }\n        return Math.floor((currentTime / 1000) + this.state.previoustime)\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <header className=\"App-header\">\n                    <video\n\n                        onLoadStartCapture={() => {\n                            // whenever a video loads, we want to check if it was watched incompletely the last time and make the previous time the current time\n                            this.player.currentTime = this.state.previoustime\n                        }}\n                        onTimeUpdate={(e) => {\n                             /**\n                             * If current time equals the duration time, then we want to reset the localstorage  and the previoustime state to 0\n                             */\n                            if(this.player.currentTime >= this.player.duration){\n                                localStorage.setItem(\"playing\", JSON.stringify({ id: this.getParamsId(), time: 0 }))\n                                this.setState({previoustime:0})\n                                \n                            }\n                            /**\n                             * To make the view more resillience, we are storing the time the user have spent viewing a video and the video id in the localstorage,\n                             * we can also store this in the database by communicating to our servers using socket connection but for now we store it in the local storage\n                           */\n                            localStorage.setItem(\"playing\", JSON.stringify({ id: this.getParamsId(), time: this.calculatePlaybackTime(e.timeStamp) }))\n                        \n                        }}\n                           /*\n                             * we need to reference the video element since we will need to gain more control over some of its attribute\n                           */\n                        ref={(ref) => { this.player = ref }} controls crossOrigin=\"anonymous\" >\n                        {\n                           /*\n                             * the sourece of the video file is provided here, (THE VIDEO FILE IS DELIVERED IN BUFFERS  -checkout this link to know more)\n                           */\n                        }\n                        <source src={`${config.PROENDOINT}/video/${this.state.videoId}`} type=\"video/mp4\"></source>\n                    </video>\n                    <h4>{this.state.videoData.name}</h4>\n                </header>\n                <Footer />\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport {\n    Route,\nHashRouter as Router,\n    Switch,\n} from \"react-router-dom\";\nimport Home from './components/Home';\nimport Player from './components/Player';\nimport './App.css';\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n            <Route exact path=\"/\" component={Home}></Route>\n            <Route path=\"/player/:id\" component={Player}></Route>\n            </Switch>\n        </Router>\n    );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}